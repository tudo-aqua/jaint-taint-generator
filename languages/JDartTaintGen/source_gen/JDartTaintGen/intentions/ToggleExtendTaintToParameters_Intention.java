package JDartTaintGen.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class ToggleExtendTaintToParameters_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ToggleExtendTaintToParameters_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:98bd9fb8-e722-45ca-8198-acf01e82e418(JDartTaintGen.intentions)", "7768624156564739684"));
  }
  @Override
  public String getPresentation() {
    return "ToggleExtendTaintToParameters";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      if (!(SPropertyOperations.getBoolean(node, PROPS.extendTaintOnParametersReached$jHA7))) {

        return "Extend Taint to not Only Check Immediate Taint";
      } else {
        return "Restrict Taint to Immediate Taint";
      }
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SPropertyOperations.set(node, PROPS.extendTaintOnParametersReached$jHA7, !(SPropertyOperations.getBoolean(node, PROPS.extendTaintOnParametersReached$jHA7)));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return ToggleExtendTaintToParameters_Intention.this;
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty extendTaintOnParametersReached$jHA7 = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12bL, 0x6bcfb282ad8f4d68L, "extendTaintOnParametersReached");
  }
}
