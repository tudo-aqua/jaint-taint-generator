package JDartTaintGen.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class ToggleGeneralWildcard_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ToggleGeneralWildcard_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:98bd9fb8-e722-45ca-8198-acf01e82e418(JDartTaintGen.intentions)", "1701909078719301517"));
  }
  @Override
  public String getPresentation() {
    return "ToggleGeneralWildcard";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return (!(SPropertyOperations.getBoolean(node, PROPS.useGeneralWildcard$236F)) ? "Use General Wildcard" : "Remove General Wildcard");
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      if (!(SPropertyOperations.getBoolean(node, PROPS.useGeneralWildcard$236F))) {
        SPropertyOperations.set(node, PROPS.usePreWildcard$1XYK, false);
        SPropertyOperations.set(node, PROPS.usePostWildcard$1XZI, false);
      }
      SPropertyOperations.set(node, PROPS.useGeneralWildcard$236F, !(SPropertyOperations.getBoolean(node, PROPS.useGeneralWildcard$236F)));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return ToggleGeneralWildcard_Intention.this;
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty useGeneralWildcard$236F = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c130L, 0x179e654a3d13877eL, "useGeneralWildcard");
    /*package*/ static final SProperty usePreWildcard$1XYK = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c130L, 0x179e654a3d138779L, "usePreWildcard");
    /*package*/ static final SProperty usePostWildcard$1XZI = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c130L, 0x179e654a3d13877bL, "usePostWildcard");
  }
}
