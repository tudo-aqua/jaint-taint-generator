package JDartTaintGen.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class TaintAnalysis__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12dL, "JDartTaintGen.structure.TaintAnalysis");

  public static final SMethod<List<SNode>> getAllSignatures_id6JfGCaHsLRS = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getAllSignatures").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6JfGCaHsLRS").build();
  public static final SMethod<List<SNode>> getAllSignaturesWithGeneratableParams_id6JfGCaHsNyo = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getAllSignaturesWithGeneratableParams").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6JfGCaHsNyo").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getAllSignatures_id6JfGCaHsLRS, getAllSignaturesWithGeneratableParams_id6JfGCaHsNyo);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static List<SNode> getAllSignatures_id6JfGCaHsLRS(@NotNull SNode __thisNode__) {
    List<SNode> signatures = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode signature : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.sanitization$YzN9), LINKS.sanitizations$Bh5F), LINKS.signatures$BvqX))) {
      ListSequence.fromList(signatures).addElement(signature);
    }
    for (SNode signature : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.sink$YCU6), LINKS.sinks$BvWp), LINKS.signatures$BvqX))) {
      ListSequence.fromList(signatures).addElement(signature);
    }
    for (SNode signature : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.source$YzMb), LINKS.signatures$YyB$), LINKS.signatures$BvqX))) {
      ListSequence.fromList(signatures).addElement(signature);
    }
    return signatures;
  }
  /*package*/ static List<SNode> getAllSignaturesWithGeneratableParams_id6JfGCaHsNyo(@NotNull SNode __thisNode__) {
    List<SNode> signatures = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode signature : ListSequence.fromList(TaintAnalysis__BehaviorDescriptor.getAllSignatures_id6JfGCaHsLRS.invoke(__thisNode__))) {
      if ((boolean) Signature__BehaviorDescriptor.hasGeneratableParams_id6JfGCaHs2$6.invoke(signature)) {
        ListSequence.fromList(signatures).addElement(signature);
      }
    }
    return signatures;
  }

  /*package*/ TaintAnalysis__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((List<SNode>) getAllSignatures_id6JfGCaHsLRS(node));
      case 1:
        return (T) ((List<SNode>) getAllSignaturesWithGeneratableParams_id6JfGCaHsNyo(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink sanitization$YzN9 = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12dL, 0x179e654a3d1383f7L, "sanitization");
    /*package*/ static final SContainmentLink sanitizations$Bh5F = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c128L, 0x179e654a3d12c134L, "sanitizations");
    /*package*/ static final SContainmentLink signatures$BvqX = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12aL, 0x179e654a3d12c1f4L, "signatures");
    /*package*/ static final SContainmentLink sink$YCU6 = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12dL, 0x179e654a3d1383faL, "sink");
    /*package*/ static final SContainmentLink sinks$BvWp = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12bL, 0x179e654a3d12c20fL, "sinks");
    /*package*/ static final SContainmentLink source$YzMb = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12dL, 0x179e654a3d1383f5L, "source");
    /*package*/ static final SContainmentLink signatures$YyB$ = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12cL, 0x179e654a3d1383c4L, "signatures");
  }
}
