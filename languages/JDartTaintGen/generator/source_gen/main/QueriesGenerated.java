package main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.IfMacroContext;
import JDartTaintGen.behavior.Signature__BehaviorDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import JDartTaintGen.behavior.TaintAnalysis__BehaviorDescriptor;
import java.util.Map;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.query.QueryKeyImpl;
import java.util.Collection;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.query.IfMacroCondition;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return "Found taint of type '" + SPropertyOperations.getString(_context.getNode(), PROPS.name$tAp1) + "' in Method: ";
  }
  public static Object propertyMacro_GetValue_1_1(final PropertyMacroContext _context) {
    return "checkTaintContainerFor" + SPropertyOperations.getString(_context.getNode(), PROPS.name$tAp1);
  }
  public static Object propertyMacro_GetValue_1_2(final PropertyMacroContext _context) {
    return "The container that will be checked for taint '" + SPropertyOperations.getString(_context.getNode(), PROPS.name$tAp1) + "'";
  }
  public static Object propertyMacro_GetValue_1_3(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.class$YEmF);
  }
  public static Object propertyMacro_GetValue_1_4(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.class$YEmF);
  }
  public static Object propertyMacro_GetValue_1_5(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.class$YEmF);
  }
  public static Object propertyMacro_GetValue_1_6(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.class$YEmF);
  }
  public static Object propertyMacro_GetValue_1_7(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.method$gL9h);
  }
  public static Object propertyMacro_GetValue_1_8(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.method$gL9h);
  }
  public static Object propertyMacro_GetValue_1_9(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.method$gL9h);
  }
  public static Object propertyMacro_GetValue_1_10(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.method$gL9h);
  }
  public static Object propertyMacro_GetValue_1_11(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF), PROPS.params$A05I).split(",").length;
  }
  public static Object propertyMacro_GetValue_1_12(final PropertyMacroContext _context) {
    return _context.createUniqueName("checkClassTrigger_" + SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.class$YEmF).replace(".", "_"), null);
  }
  public static Object propertyMacro_GetValue_1_13(final PropertyMacroContext _context) {
    String params = "none";
    if ((SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF) != null) && isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF), PROPS.params$A05I)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF), PROPS.useGeneralWildcard$236F))) {
      params = SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF), PROPS.params$A05I);
    }
    String method = "*";
    if ((SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe) != null) && isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.method$gL9h)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF), PROPS.useGeneralWildcard$236F))) {
      method = SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.method$gL9h);
    }
    String clazz = "*";
    if ((SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5) != null) && isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.class$YEmF)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.useGeneralWildcard$236F))) {
      clazz = SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.class$YEmF);
    }
    return "Return whether the entered/exited method matches the method '" + method + "' of class '" + clazz + "' with parameters '" + params + "'";
  }
  public static Object propertyMacro_GetValue_1_14(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF), PROPS.params$A05I);
  }
  public static Object propertyMacro_GetValue_1_15(final PropertyMacroContext _context) {
    return " has been checked for a '" + SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF), PROPS.params$A05I) + "' parameter but couldn't find any.";
  }
  public static Object propertyMacro_GetValue_1_16(final PropertyMacroContext _context) {
    return _context.createUniqueName("checkParameter_" + SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF), PROPS.params$A05I), null);
  }
  public static Object propertyMacro_GetValue_1_17(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$tAp1) + "TaintInjector";
  }
  public static Object propertyMacro_GetValue_2_0(final PropertyMacroContext _context) {
    return "is" + SPropertyOperations.getString(_context.getNode(), PROPS.name$tAp1) + "Tainted";
  }
  public static Object propertyMacro_GetValue_3_0(final PropertyMacroContext _context) {
    return "is" + SPropertyOperations.getString(_context.getNode(), PROPS.name$tAp1) + "Tainted";
  }
  public static Object propertyMacro_GetValue_3_1(final PropertyMacroContext _context) {
    return "makeVariable" + SPropertyOperations.getString(_context.getNode(), PROPS.name$tAp1) + "IfTainted";
  }
  public static boolean ifMacro_Condition_1_0(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.sink$YCU6) != null);
  }
  public static boolean ifMacro_Condition_1_1(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.source$YzMb) != null);
  }
  public static boolean ifMacro_Condition_1_2(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.sanitization$YzN9) != null);
  }
  public static boolean ifMacro_Condition_1_3(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.sink$YCU6) != null);
  }
  public static boolean ifMacro_Condition_1_4(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.useGeneralWildcard$236F)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.usePostWildcard$1XZI)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.usePreWildcard$1XYK));
  }
  public static boolean ifMacro_Condition_1_5(final IfMacroContext _context) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.usePostWildcard$1XZI) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.useGeneralWildcard$236F)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.usePreWildcard$1XYK));
  }
  public static boolean ifMacro_Condition_1_6(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.useGeneralWildcard$236F)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.usePostWildcard$1XZI)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.usePreWildcard$1XYK);
  }
  public static boolean ifMacro_Condition_1_7(final IfMacroContext _context) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.usePostWildcard$1XZI) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.usePreWildcard$1XYK) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.class$BhC5), PROPS.useGeneralWildcard$236F));
  }
  public static boolean ifMacro_Condition_1_8(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.useGeneralWildcard$236F)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.usePostWildcard$1XZI)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.usePreWildcard$1XYK)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.useConstructor$TxCP));
  }
  public static boolean ifMacro_Condition_1_9(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.useConstructor$TxCP)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.useGeneralWildcard$236F)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.usePreWildcard$1XYK)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.usePostWildcard$1XZI);
  }
  public static boolean ifMacro_Condition_1_10(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.useConstructor$TxCP)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.useGeneralWildcard$236F)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.usePostWildcard$1XZI)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.usePreWildcard$1XYK);
  }
  public static boolean ifMacro_Condition_1_11(final IfMacroContext _context) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.usePostWildcard$1XZI) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.usePreWildcard$1XYK) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.useConstructor$TxCP)) && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.useGeneralWildcard$236F));
  }
  public static boolean ifMacro_Condition_1_12(final IfMacroContext _context) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.useConstructor$TxCP);
  }
  public static boolean ifMacro_Condition_1_13(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.method$BhNe), PROPS.useConstructor$TxCP));
  }
  public static boolean ifMacro_Condition_1_14(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF) == null);
  }
  public static boolean ifMacro_Condition_1_15(final IfMacroContext _context) {
    return isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF), PROPS.params$A05I));
  }
  public static boolean ifMacro_Condition_1_16(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF), PROPS.useGeneralWildcard$236F)) || (SLinkOperations.getTarget(_context.getNode(), LINKS.params$BhOF) == null);
  }
  public static boolean ifMacro_Condition_1_17(final IfMacroContext _context) {
    return (boolean) Signature__BehaviorDescriptor.hasGeneratableParams_id6JfGCaHs2$6.invoke(_context.getNode());
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.sink$YCU6), LINKS.sinks$BvWp), LINKS.signatures$BvqX);
  }
  public static Iterable<SNode> sourceNodesQuery_1_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.source$YzMb), LINKS.signatures$YyB$), LINKS.signatures$BvqX);
  }
  public static Iterable<SNode> sourceNodesQuery_1_2(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.sanitization$YzN9), LINKS.sanitizations$Bh5F), LINKS.signatures$BvqX);
  }
  public static Iterable<SNode> sourceNodesQuery_1_3(final SourceSubstituteMacroNodesContext _context) {
    return TaintAnalysis__BehaviorDescriptor.getAllSignatures_id6JfGCaHsLRS.invoke(_context.getNode());
  }
  public static Iterable<SNode> sourceNodesQuery_1_4(final SourceSubstituteMacroNodesContext _context) {
    return TaintAnalysis__BehaviorDescriptor.getAllSignaturesWithGeneratableParams_id6JfGCaHsNyo.invoke(_context.getNode());
  }
  public static Iterable<SNode> sourceNodesQuery_1_5(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.taints$ZDK0);
  }
  public static Iterable<SNode> sourceNodesQuery_2_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.taints$ZDK0);
  }
  public static Iterable<SNode> sourceNodesQuery_2_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.taints$ZDK0);
  }
  public static Iterable<SNode> sourceNodesQuery_3_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.taints$ZDK0);
  }
  public static Iterable<SNode> sourceNodesQuery_3_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.taints$ZDK0);
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("4721977689206783365", new SNsQ(i++));
    snsqMethods.put("5592694659413537765", new SNsQ(i++));
    snsqMethods.put("4721977689206572502", new SNsQ(i++));
    snsqMethods.put("5592694659412533445", new SNsQ(i++));
    snsqMethods.put("4721977689208335125", new SNsQ(i++));
    snsqMethods.put("1130693315166456567", new SNsQ(i++));
    snsqMethods.put("1130693315165262613", new SNsQ(i++));
    snsqMethods.put("1130693315165394376", new SNsQ(i++));
    snsqMethods.put("1130693315165735620", new SNsQ(i++));
    snsqMethods.put("1130693315165766000", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    final String id = ((QueryKeyImpl) identity).getQueryNodeId().toString();
    if (!(snsqMethods.containsKey(id))) {
      return super.getSourceNodesQuery(identity);
    }
    return snsqMethods.get(id);
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_1(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_2(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_3(ctx));
        case 4:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_4(ctx));
        case 5:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_5(ctx));
        case 6:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_2_0(ctx));
        case 7:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_2_1(ctx));
        case 8:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_3_0(ctx));
        case 9:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_3_1(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("7768624156564230127", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "Found taint of type WeakRandomness in Method "));
    pvqMethods.put("8726087736089175722", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "checkTaintContainerForWeakRandomness"));
    pvqMethods.put("7768624156564276318", new PVQ(i++, MetaAdapterFactory.getProperty(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x757ba20a4c905f8aL, 0x757ba20a4c905f8eL, "text"), "The container that will be checked for taint"));
    pvqMethods.put("5592694659413091227", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "classsName"));
    pvqMethods.put("5592694659413091268", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "className"));
    pvqMethods.put("5592694659413091306", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "className"));
    pvqMethods.put("5592694659413091346", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "className"));
    pvqMethods.put("5592694659413091392", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "methodName"));
    pvqMethods.put("5592694659413091439", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "methodName"));
    pvqMethods.put("5592694659413091485", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "methodName"));
    pvqMethods.put("5592694659413091531", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "methodName"));
    pvqMethods.put("5592694659413091671", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "3"));
    pvqMethods.put("5592694659412808805", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "checkClassTrigger_Class"));
    pvqMethods.put("4721977689207203860", new PVQ(i++, MetaAdapterFactory.getProperty(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x514c0f687050918eL, 0x514c0f687050918fL, "text"), "Returns whether the entered method matches a specific method of a specific class"));
    pvqMethods.put("4721977689208485640", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "var"));
    pvqMethods.put("4721977689208456710", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), " has been checked for a 'parameter' parameter but couldn't find any."));
    pvqMethods.put("4721977689208879726", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "checkParameter"));
    pvqMethods.put("8726087736089095477", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "TaintInjector"));
    pvqMethods.put("1130693315165263456", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "isTaint"));
    pvqMethods.put("1130693315165739603", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "isTaint"));
    pvqMethods.put("1130693315165766980", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "makeVariableWeakRandomIfTainted"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(pvqMethods.containsKey(id))) {
      return super.getPropertyValueQuery(identity);
    }
    return pvqMethods.get(id);
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_1_1(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_1_2(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_1_3(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_1_4(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_1_5(ctx);
        case 6:
          return QueriesGenerated.propertyMacro_GetValue_1_6(ctx);
        case 7:
          return QueriesGenerated.propertyMacro_GetValue_1_7(ctx);
        case 8:
          return QueriesGenerated.propertyMacro_GetValue_1_8(ctx);
        case 9:
          return QueriesGenerated.propertyMacro_GetValue_1_9(ctx);
        case 10:
          return QueriesGenerated.propertyMacro_GetValue_1_10(ctx);
        case 11:
          return QueriesGenerated.propertyMacro_GetValue_1_11(ctx);
        case 12:
          return QueriesGenerated.propertyMacro_GetValue_1_12(ctx);
        case 13:
          return QueriesGenerated.propertyMacro_GetValue_1_13(ctx);
        case 14:
          return QueriesGenerated.propertyMacro_GetValue_1_14(ctx);
        case 15:
          return QueriesGenerated.propertyMacro_GetValue_1_15(ctx);
        case 16:
          return QueriesGenerated.propertyMacro_GetValue_1_16(ctx);
        case 17:
          return QueriesGenerated.propertyMacro_GetValue_1_17(ctx);
        case 18:
          return QueriesGenerated.propertyMacro_GetValue_2_0(ctx);
        case 19:
          return QueriesGenerated.propertyMacro_GetValue_3_0(ctx);
        case 20:
          return QueriesGenerated.propertyMacro_GetValue_3_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, IfMacroCondition> imcMethods = new HashMap<String, IfMacroCondition>();
  {
    int i = 0;
    imcMethods.put("4676011446756089214", new IfMC(i++));
    imcMethods.put("4364295680588346286", new IfMC(i++));
    imcMethods.put("8726087736088742903", new IfMC(i++));
    imcMethods.put("1515104159315309088", new IfMC(i++));
    imcMethods.put("5592694659413091238", new IfMC(i++));
    imcMethods.put("5592694659413091278", new IfMC(i++));
    imcMethods.put("5592694659413091317", new IfMC(i++));
    imcMethods.put("5592694659413091356", new IfMC(i++));
    imcMethods.put("5592694659413091402", new IfMC(i++));
    imcMethods.put("5592694659413091449", new IfMC(i++));
    imcMethods.put("5592694659413091495", new IfMC(i++));
    imcMethods.put("5592694659413091541", new IfMC(i++));
    imcMethods.put("5592694659413091576", new IfMC(i++));
    imcMethods.put("5592694659413091592", new IfMC(i++));
    imcMethods.put("5592694659413091658", new IfMC(i++));
    imcMethods.put("5592694659413091689", new IfMC(i++));
    imcMethods.put("5592694659413091703", new IfMC(i++));
    imcMethods.put("7768624156563791713", new IfMC(i++));
  }
  @NotNull
  @Override
  public IfMacroCondition getIfMacroCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(imcMethods.containsKey(id))) {
      return super.getIfMacroCondition(identity);
    }
    return imcMethods.get(id);
  }
  private static class IfMC implements IfMacroCondition {
    private final int methodKey;
    public IfMC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull IfMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.ifMacro_Condition_1_0(ctx);
        case 1:
          return QueriesGenerated.ifMacro_Condition_1_1(ctx);
        case 2:
          return QueriesGenerated.ifMacro_Condition_1_2(ctx);
        case 3:
          return QueriesGenerated.ifMacro_Condition_1_3(ctx);
        case 4:
          return QueriesGenerated.ifMacro_Condition_1_4(ctx);
        case 5:
          return QueriesGenerated.ifMacro_Condition_1_5(ctx);
        case 6:
          return QueriesGenerated.ifMacro_Condition_1_6(ctx);
        case 7:
          return QueriesGenerated.ifMacro_Condition_1_7(ctx);
        case 8:
          return QueriesGenerated.ifMacro_Condition_1_8(ctx);
        case 9:
          return QueriesGenerated.ifMacro_Condition_1_9(ctx);
        case 10:
          return QueriesGenerated.ifMacro_Condition_1_10(ctx);
        case 11:
          return QueriesGenerated.ifMacro_Condition_1_11(ctx);
        case 12:
          return QueriesGenerated.ifMacro_Condition_1_12(ctx);
        case 13:
          return QueriesGenerated.ifMacro_Condition_1_13(ctx);
        case 14:
          return QueriesGenerated.ifMacro_Condition_1_14(ctx);
        case 15:
          return QueriesGenerated.ifMacro_Condition_1_15(ctx);
        case 16:
          return QueriesGenerated.ifMacro_Condition_1_16(ctx);
        case 17:
          return QueriesGenerated.ifMacro_Condition_1_17(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for if macro %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty class$YEmF = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c131L, 0x179e654a3d13843bL, "class");
    /*package*/ static final SProperty method$gL9h = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c132L, 0x179e654a3d14701cL, "method");
    /*package*/ static final SProperty params$A05I = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c133L, 0x179e654a3d1487c2L, "params");
    /*package*/ static final SProperty useGeneralWildcard$236F = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c130L, 0x179e654a3d13877eL, "useGeneralWildcard");
    /*package*/ static final SProperty usePostWildcard$1XZI = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c130L, 0x179e654a3d13877bL, "usePostWildcard");
    /*package*/ static final SProperty usePreWildcard$1XYK = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c130L, 0x179e654a3d138779L, "usePreWildcard");
    /*package*/ static final SProperty useConstructor$TxCP = MetaAdapterFactory.getProperty(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c132L, 0x179e654a3d15efb8L, "useConstructor");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink class$BhC5 = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c129L, 0x179e654a3d12c151L, "class");
    /*package*/ static final SContainmentLink method$BhNe = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c129L, 0x179e654a3d12c153L, "method");
    /*package*/ static final SContainmentLink params$BhOF = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c129L, 0x179e654a3d12c156L, "params");
    /*package*/ static final SContainmentLink sink$YCU6 = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12dL, 0x179e654a3d1383faL, "sink");
    /*package*/ static final SContainmentLink source$YzMb = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12dL, 0x179e654a3d1383f5L, "source");
    /*package*/ static final SContainmentLink sanitization$YzN9 = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12dL, 0x179e654a3d1383f7L, "sanitization");
    /*package*/ static final SContainmentLink sinks$BvWp = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12bL, 0x179e654a3d12c20fL, "sinks");
    /*package*/ static final SContainmentLink signatures$BvqX = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12aL, 0x179e654a3d12c1f4L, "signatures");
    /*package*/ static final SContainmentLink signatures$YyB$ = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c12cL, 0x179e654a3d1383c4L, "signatures");
    /*package*/ static final SContainmentLink sanitizations$Bh5F = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x179e654a3d12c128L, 0x179e654a3d12c134L, "sanitizations");
    /*package*/ static final SContainmentLink taints$ZDK0 = MetaAdapterFactory.getContainmentLink(0xd29ed1555a69438bL, 0x817d70e96ceef79eL, 0x1f49bfe035c9450dL, 0x1f49bfe035c9450eL, "taints");
  }
}
