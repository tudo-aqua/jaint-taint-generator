package gov.nasa.jpf.jdart.taint;

/*Generated by MPS */

import gov.nasa.jpf.vm.VMListener;
import gov.nasa.jpf.vm.VM;
import gov.nasa.jpf.vm.ThreadInfo;
import gov.nasa.jpf.vm.Instruction;
import gov.nasa.jpf.vm.ElementInfo;
import gov.nasa.jpf.jvm.ClassFile;
import gov.nasa.jpf.vm.ClassInfo;
import gov.nasa.jpf.vm.ChoiceGenerator;
import gov.nasa.jpf.vm.MethodInfo;
import gov.nasa.jpf.vm.StackFrame;
import gov.nasa.jpf.vm.NativeStackFrame;
import gov.nasa.jpf.jdart.security.TaintContainer;
import gov.nasa.jpf.jvm.JVMStackFrame;
import gov.nasa.jpf.jdart.security.TaintedVariable;
import gov.nasa.jpf.vm.LocalVarInfo;

public class CrossSiteScriptingTaintInjector extends TaintChecker implements VMListener {

  @Override
  public void vmInitialized(VM vm) {
  }
  @Override
  public void executeInstruction(VM vm, ThreadInfo info, Instruction instruction) {
  }
  @Override
  public void instructionExecuted(VM vm, ThreadInfo info, Instruction instruction, Instruction instruction1) {
  }
  @Override
  public void threadStarted(VM vm, ThreadInfo info) {
  }
  @Override
  public void threadBlocked(VM vm, ThreadInfo info, ElementInfo info1) {
  }
  @Override
  public void threadWaiting(VM vm, ThreadInfo info) {
  }
  @Override
  public void threadNotified(VM vm, ThreadInfo info) {
  }
  @Override
  public void threadInterrupted(VM vm, ThreadInfo info) {
  }
  @Override
  public void threadTerminated(VM vm, ThreadInfo info) {
  }
  @Override
  public void threadScheduled(VM vm, ThreadInfo info) {
  }
  @Override
  public void loadClass(VM vm, ClassFile file) {
  }
  @Override
  public void classLoaded(VM vm, ClassInfo info) {
  }
  @Override
  public void objectCreated(VM vm, ThreadInfo info, ElementInfo info1) {
  }
  @Override
  public void objectReleased(VM vm, ThreadInfo info, ElementInfo info1) {
  }
  @Override
  public void objectLocked(VM vm, ThreadInfo info, ElementInfo info1) {
  }
  @Override
  public void objectUnlocked(VM vm, ThreadInfo info, ElementInfo info1) {
  }
  @Override
  public void objectWait(VM vm, ThreadInfo info, ElementInfo info1) {
  }
  @Override
  public void objectNotify(VM vm, ThreadInfo info, ElementInfo info1) {
  }
  @Override
  public void objectNotifyAll(VM vm, ThreadInfo info, ElementInfo info1) {
  }
  @Override
  public void objectExposed(VM vm, ThreadInfo info, ElementInfo info1, ElementInfo info2) {
  }
  @Override
  public void objectShared(VM vm, ThreadInfo info, ElementInfo info1) {
  }
  @Override
  public void gcBegin(VM vm) {
  }
  @Override
  public void gcEnd(VM vm) {
  }
  @Override
  public void exceptionThrown(VM vm, ThreadInfo info, ElementInfo info1) {
  }
  @Override
  public void exceptionBailout(VM vm, ThreadInfo info) {
  }
  @Override
  public void exceptionHandled(VM vm, ThreadInfo info) {
  }
  @Override
  public void choiceGeneratorRegistered(VM vm, ChoiceGenerator<?> generator, ThreadInfo info, Instruction instruction) {
  }
  @Override
  public void choiceGeneratorSet(VM vm, ChoiceGenerator<?> generator) {
  }
  @Override
  public void choiceGeneratorAdvanced(VM vm, ChoiceGenerator<?> generator) {
  }
  @Override
  public void choiceGeneratorProcessed(VM vm, ChoiceGenerator<?> generator) {
  }
  @Override
  public void methodEntered(VM vm, ThreadInfo currentThread, MethodInfo enteredMethod) {
    {
      // This block checks for the declared sink methods 
      boolean conditionTrigger = false;

      conditionTrigger |= checkClassTrigger_javax_servlet_http_HttpServletResponse_a0a1(vm, currentThread, enteredMethod);

      // The if-clause is triggered, when at least one class with at least one method is matched 
      if (conditionTrigger) {
        StackFrame stackFrame = currentThread.getTopFrame();
        if (stackFrame instanceof NativeStackFrame) {
          NativeStackFrame nativeStackFrame = (NativeStackFrame) stackFrame;
          Object[] args = nativeStackFrame.getArguments();
          for (int i = 0; i < args.length; i++) {
            ElementInfo elementInfo = (ElementInfo) args[i];
            TaintContainer taintContainer = elementInfo.getObjectAttr(TaintContainer.class);
            checkTaintContainerForCrossSiteScripting(currentThread, enteredMethod, taintContainer);
          }
        } else if (stackFrame instanceof JVMStackFrame) {
          JVMStackFrame jvmStackFrame = (JVMStackFrame) stackFrame;
          Object[] args = jvmStackFrame.getArgumentValues(currentThread);
          // Check for each argument whether it is tainted 
          for (int i = 0; i < args.length; i++) {
            ElementInfo elementInfo = (ElementInfo) args[i];
            TaintContainer taintContainer = elementInfo.getObjectAttr(TaintContainer.class);
            checkTaintContainerForCrossSiteScripting(currentThread, enteredMethod, taintContainer);
          }
        }
      }
    }
  }

  @Override
  public void methodExited(VM vm, ThreadInfo currentThread, MethodInfo exitedMethod) {
    {
      // This block checks for the declared source methods  
      boolean conditionTrigger = false;
      StackFrame stackFrame = currentThread.getTopFrame();

      conditionTrigger |= checkClassTrigger_HttpServletRequest_a0a1(vm, currentThread, exitedMethod);

      // The if-clause is triggered, when at least one class with at least one method is matched 
      if (conditionTrigger) {
        Object resultAttribute = null;
        // Get ResultAttribute from StackFrame 
        if (stackFrame instanceof NativeStackFrame) {
          NativeStackFrame nativeStackFrame = (NativeStackFrame) stackFrame;
          resultAttribute = nativeStackFrame.getResultAttr();
        } else if (stackFrame instanceof JVMStackFrame) {
          JVMStackFrame jvmStackFrame = ((JVMStackFrame) stackFrame);
          resultAttribute = jvmStackFrame.getResultAttr();
        }
        // Use resultAttribute to access TaintContainer and set TaintVariable 
        if (resultAttribute == null) {
          // It is not allowed to add a new Container in the Listener 
        } else if (resultAttribute instanceof TaintedVariable) {
          // Declared sink method set taint variable to 'true' 
          ((TaintedVariable) resultAttribute).isCrossSiteScriptingTainted = true;
        }
      }
    }
    {
      // This block checks for the declared sanitization methods 
      boolean conditionTrigger = false;

      conditionTrigger |= checkClassTrigger_org_apache_commons_lang_StringEscapeUtils_a0a1(vm, currentThread, exitedMethod);
      conditionTrigger |= checkClassTrigger_org_owasp_esapi_ESAPI_b0a1(vm, currentThread, exitedMethod);
      conditionTrigger |= checkClassTrigger_org_springframework_web_util_HtmlUtils_c0a1(vm, currentThread, exitedMethod);

      // The if-clause is triggered, when at least one class with at least one method is matched 
      if (conditionTrigger) {
        StackFrame stackFrame = currentThread.getTopFrame();
        Object resultAttribute = null;
        // Get ResultAttribute from StackFrame 
        if (stackFrame instanceof NativeStackFrame) {
          NativeStackFrame nativeStackFrame = (NativeStackFrame) stackFrame;
          resultAttribute = nativeStackFrame.getResultAttr();
        } else if (stackFrame instanceof JVMStackFrame) {
          JVMStackFrame jvmStackFrame = ((JVMStackFrame) stackFrame);
          resultAttribute = jvmStackFrame.getResultAttr();
        }
        // Use resultAttribute to access TaintContainer and set TaintVariable 
        if (resultAttribute == null) {
          // It is not allowed to add a new Container in the Listener 
        } else if (resultAttribute instanceof TaintedVariable) {
          // Declared sanitization methods set taint to 'false' 
          ((TaintedVariable) resultAttribute).isCrossSiteScriptingTainted = false;
        }
      }

    }
  }
  /**
   * This method checks for taint
   * 
   * @param threadInfo The current thread
   * @param methodInfo The current method
   * @param container The container that will be checked for taint 'CrossSiteScripting'
   */
  protected void checkTaintContainerForCrossSiteScripting(ThreadInfo threadInfo, MethodInfo methodInfo, TaintContainer container) {
    // Checks whether the container is existing and has the taint flag set 
    if (container != null && container.isCrossSiteScriptingTainted) {
      String message = "Found taint of type 'CrossSiteScripting' in Method: " + methodInfo.getName();
      logger.warning(message);
      threadInfo.createAndThrowException("errors.Taint");
    }
  }

  /**
   * This method checks for a specific method and class with given parameters
   * 
   * @param vm The current virtual machine
   * @param currentThread The currently active thread
   * @param currentMethod The exited method that triggered the process
   * @return Return whether the entered/exited method matches the method '*' of class 'org.apache.commons.lang.StringEscapeUtils' with parameters 'none'
   */
  protected boolean checkClassTrigger_org_apache_commons_lang_StringEscapeUtils_a0a1(VM vm, ThreadInfo currentThread, MethodInfo currentMethod) {
    StackFrame stackFrame = currentThread.getTopFrame();
    String currentClassName = currentMethod.getClass().getName();
    String currentMethodName = currentMethod.getName();
    boolean classTrigger = true;

    // Check for the specified class 
    classTrigger &= currentClassName.equals("org.apache.commons.lang.StringEscapeUtils");

    // Check for the specified method 
    classTrigger &= currentMethodName.equals("escapeHtml");
    classTrigger &= !(currentMethod.isInit());

    // Collect method parameters 
    LocalVarInfo[] arguments = stackFrame.getLocalVars();


    return classTrigger;
  }
  /**
   * This method checks for a specific method and class with given parameters
   * 
   * @param vm The current virtual machine
   * @param currentThread The currently active thread
   * @param currentMethod The exited method that triggered the process
   * @return Return whether the entered/exited method matches the method '*' of class 'org.owasp.esapi.ESAPI' with parameters 'none'
   */
  protected boolean checkClassTrigger_org_owasp_esapi_ESAPI_b0a1(VM vm, ThreadInfo currentThread, MethodInfo currentMethod) {
    StackFrame stackFrame = currentThread.getTopFrame();
    String currentClassName = currentMethod.getClass().getName();
    String currentMethodName = currentMethod.getName();
    boolean classTrigger = true;

    // Check for the specified class 
    classTrigger &= currentClassName.equals("org.owasp.esapi.ESAPI");

    // Check for the specified method 
    classTrigger &= currentMethodName.equals("encodeForHTML");
    classTrigger &= !(currentMethod.isInit());

    // Collect method parameters 
    LocalVarInfo[] arguments = stackFrame.getLocalVars();


    return classTrigger;
  }
  /**
   * This method checks for a specific method and class with given parameters
   * 
   * @param vm The current virtual machine
   * @param currentThread The currently active thread
   * @param currentMethod The exited method that triggered the process
   * @return Return whether the entered/exited method matches the method '*' of class 'org.springframework.web.util.HtmlUtils' with parameters 'none'
   */
  protected boolean checkClassTrigger_org_springframework_web_util_HtmlUtils_c0a1(VM vm, ThreadInfo currentThread, MethodInfo currentMethod) {
    StackFrame stackFrame = currentThread.getTopFrame();
    String currentClassName = currentMethod.getClass().getName();
    String currentMethodName = currentMethod.getName();
    boolean classTrigger = true;

    // Check for the specified class 
    classTrigger &= currentClassName.equals("org.springframework.web.util.HtmlUtils");

    // Check for the specified method 
    classTrigger &= currentMethodName.equals("htmlEscape");
    classTrigger &= !(currentMethod.isInit());

    // Collect method parameters 
    LocalVarInfo[] arguments = stackFrame.getLocalVars();


    return classTrigger;
  }
  /**
   * This method checks for a specific method and class with given parameters
   * 
   * @param vm The current virtual machine
   * @param currentThread The currently active thread
   * @param currentMethod The exited method that triggered the process
   * @return Return whether the entered/exited method matches the method 'getWriter' of class 'javax.servlet.http.HttpServletResponse' with parameters 'none'
   */
  protected boolean checkClassTrigger_javax_servlet_http_HttpServletResponse_a0a1(VM vm, ThreadInfo currentThread, MethodInfo currentMethod) {
    StackFrame stackFrame = currentThread.getTopFrame();
    String currentClassName = currentMethod.getClass().getName();
    String currentMethodName = currentMethod.getName();
    boolean classTrigger = true;

    // Check for the specified class 
    classTrigger &= currentClassName.equals("javax.servlet.http.HttpServletResponse");

    // Check for the specified method 
    classTrigger &= currentMethodName.equals("getWriter");
    classTrigger &= !(currentMethod.isInit());

    // Collect method parameters 
    LocalVarInfo[] arguments = stackFrame.getLocalVars();

    if (arguments != null) {
      // Check for length of passed arguments 
      classTrigger &= arguments.length == 0;
    }

    return classTrigger;
  }
  /**
   * This method checks for a specific method and class with given parameters
   * 
   * @param vm The current virtual machine
   * @param currentThread The currently active thread
   * @param currentMethod The exited method that triggered the process
   * @return Return whether the entered/exited method matches the method 'get' of class 'HttpServletRequest' with parameters 'none'
   */
  protected boolean checkClassTrigger_HttpServletRequest_a0a1(VM vm, ThreadInfo currentThread, MethodInfo currentMethod) {
    StackFrame stackFrame = currentThread.getTopFrame();
    String currentClassName = currentMethod.getClass().getName();
    String currentMethodName = currentMethod.getName();
    boolean classTrigger = true;

    // Check for the specified class 
    classTrigger &= currentClassName.equals("HttpServletRequest");

    // Check for the specified method 
    classTrigger &= currentMethodName.startsWith("get");
    classTrigger &= !(currentMethod.isInit());

    // Collect method parameters 
    LocalVarInfo[] arguments = stackFrame.getLocalVars();

    if (arguments != null) {
      // Check for length of passed arguments 
      classTrigger &= arguments.length == 0;
    }

    return classTrigger;
  }


}
